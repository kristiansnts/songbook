/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ApprovedRouteImport } from './routes/approved'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as errors503RouteImport } from './routes/(errors)/503'
import { Route as errors500RouteImport } from './routes/(errors)/500'
import { Route as errors404RouteImport } from './routes/(errors)/404'
import { Route as errors403RouteImport } from './routes/(errors)/403'
import { Route as errors401RouteImport } from './routes/(errors)/401'
import { Route as authSignInRouteImport } from './routes/(auth)/sign-in'
import { Route as AuthenticatedUsersIndexRouteImport } from './routes/_authenticated/users/index'
import { Route as AuthenticatedUserApprovalIndexRouteImport } from './routes/_authenticated/user-approval/index'
import { Route as AuthenticatedTagsIndexRouteImport } from './routes/_authenticated/tags/index'
import { Route as AuthenticatedSongsIndexRouteImport } from './routes/_authenticated/songs/index'
import { Route as AuthenticatedPlaylistsIndexRouteImport } from './routes/_authenticated/playlists/index'
import { Route as AuthenticatedNotesIndexRouteImport } from './routes/_authenticated/notes/index'
import { Route as AuthenticatedHelpCenterIndexRouteImport } from './routes/_authenticated/help-center/index'
import { Route as AuthenticatedUsersCreateRouteImport } from './routes/_authenticated/users/create'
import { Route as AuthenticatedTagsCreateRouteImport } from './routes/_authenticated/tags/create'
import { Route as AuthenticatedSongsCreateRouteImport } from './routes/_authenticated/songs/create'
import { Route as AuthenticatedPlaylistsCreateRouteImport } from './routes/_authenticated/playlists/create'
import { Route as AuthenticatedNotesCreateRouteImport } from './routes/_authenticated/notes/create'
import { Route as AuthenticatedUsersViewIdRouteImport } from './routes/_authenticated/users/view/$id'
import { Route as AuthenticatedUsersEditIdRouteImport } from './routes/_authenticated/users/edit/$id'
import { Route as AuthenticatedTagsViewIdRouteImport } from './routes/_authenticated/tags/view/$id'
import { Route as AuthenticatedTagsEditIdRouteImport } from './routes/_authenticated/tags/edit/$id'
import { Route as AuthenticatedSongsViewIdRouteImport } from './routes/_authenticated/songs/view/$id'
import { Route as AuthenticatedSongsEditIdRouteImport } from './routes/_authenticated/songs/edit/$id'
import { Route as AuthenticatedPlaylistsViewIdRouteImport } from './routes/_authenticated/playlists/view/$id'
import { Route as AuthenticatedPlaylistsEditIdRouteImport } from './routes/_authenticated/playlists/edit/$id'
import { Route as AuthenticatedNotesViewIdRouteImport } from './routes/_authenticated/notes/view/$id'
import { Route as AuthenticatedNotesEditIdRouteImport } from './routes/_authenticated/notes/edit/$id'

const ApprovedRoute = ApprovedRouteImport.update({
  id: '/approved',
  path: '/approved',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const errors503Route = errors503RouteImport.update({
  id: '/(errors)/503',
  path: '/503',
  getParentRoute: () => rootRouteImport,
} as any)
const errors500Route = errors500RouteImport.update({
  id: '/(errors)/500',
  path: '/500',
  getParentRoute: () => rootRouteImport,
} as any)
const errors404Route = errors404RouteImport.update({
  id: '/(errors)/404',
  path: '/404',
  getParentRoute: () => rootRouteImport,
} as any)
const errors403Route = errors403RouteImport.update({
  id: '/(errors)/403',
  path: '/403',
  getParentRoute: () => rootRouteImport,
} as any)
const errors401Route = errors401RouteImport.update({
  id: '/(errors)/401',
  path: '/401',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignInRoute = authSignInRouteImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedUsersIndexRoute = AuthenticatedUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedUserApprovalIndexRoute =
  AuthenticatedUserApprovalIndexRouteImport.update({
    id: '/user-approval/',
    path: '/user-approval/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedTagsIndexRoute = AuthenticatedTagsIndexRouteImport.update({
  id: '/tags/',
  path: '/tags/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedSongsIndexRoute = AuthenticatedSongsIndexRouteImport.update({
  id: '/songs/',
  path: '/songs/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedPlaylistsIndexRoute =
  AuthenticatedPlaylistsIndexRouteImport.update({
    id: '/playlists/',
    path: '/playlists/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedNotesIndexRoute = AuthenticatedNotesIndexRouteImport.update({
  id: '/notes/',
  path: '/notes/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedHelpCenterIndexRoute =
  AuthenticatedHelpCenterIndexRouteImport.update({
    id: '/help-center/',
    path: '/help-center/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedUsersCreateRoute =
  AuthenticatedUsersCreateRouteImport.update({
    id: '/users/create',
    path: '/users/create',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedTagsCreateRoute = AuthenticatedTagsCreateRouteImport.update({
  id: '/tags/create',
  path: '/tags/create',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedSongsCreateRoute =
  AuthenticatedSongsCreateRouteImport.update({
    id: '/songs/create',
    path: '/songs/create',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedPlaylistsCreateRoute =
  AuthenticatedPlaylistsCreateRouteImport.update({
    id: '/playlists/create',
    path: '/playlists/create',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedNotesCreateRoute =
  AuthenticatedNotesCreateRouteImport.update({
    id: '/notes/create',
    path: '/notes/create',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedUsersViewIdRoute =
  AuthenticatedUsersViewIdRouteImport.update({
    id: '/users/view/$id',
    path: '/users/view/$id',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedUsersEditIdRoute =
  AuthenticatedUsersEditIdRouteImport.update({
    id: '/users/edit/$id',
    path: '/users/edit/$id',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedTagsViewIdRoute = AuthenticatedTagsViewIdRouteImport.update({
  id: '/tags/view/$id',
  path: '/tags/view/$id',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedTagsEditIdRoute = AuthenticatedTagsEditIdRouteImport.update({
  id: '/tags/edit/$id',
  path: '/tags/edit/$id',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedSongsViewIdRoute =
  AuthenticatedSongsViewIdRouteImport.update({
    id: '/songs/view/$id',
    path: '/songs/view/$id',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedSongsEditIdRoute =
  AuthenticatedSongsEditIdRouteImport.update({
    id: '/songs/edit/$id',
    path: '/songs/edit/$id',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedPlaylistsViewIdRoute =
  AuthenticatedPlaylistsViewIdRouteImport.update({
    id: '/playlists/view/$id',
    path: '/playlists/view/$id',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedPlaylistsEditIdRoute =
  AuthenticatedPlaylistsEditIdRouteImport.update({
    id: '/playlists/edit/$id',
    path: '/playlists/edit/$id',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedNotesViewIdRoute =
  AuthenticatedNotesViewIdRouteImport.update({
    id: '/notes/view/$id',
    path: '/notes/view/$id',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedNotesEditIdRoute =
  AuthenticatedNotesEditIdRouteImport.update({
    id: '/notes/edit/$id',
    path: '/notes/edit/$id',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/approved': typeof ApprovedRoute
  '/sign-in': typeof authSignInRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/notes/create': typeof AuthenticatedNotesCreateRoute
  '/playlists/create': typeof AuthenticatedPlaylistsCreateRoute
  '/songs/create': typeof AuthenticatedSongsCreateRoute
  '/tags/create': typeof AuthenticatedTagsCreateRoute
  '/users/create': typeof AuthenticatedUsersCreateRoute
  '/help-center': typeof AuthenticatedHelpCenterIndexRoute
  '/notes': typeof AuthenticatedNotesIndexRoute
  '/playlists': typeof AuthenticatedPlaylistsIndexRoute
  '/songs': typeof AuthenticatedSongsIndexRoute
  '/tags': typeof AuthenticatedTagsIndexRoute
  '/user-approval': typeof AuthenticatedUserApprovalIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
  '/notes/edit/$id': typeof AuthenticatedNotesEditIdRoute
  '/notes/view/$id': typeof AuthenticatedNotesViewIdRoute
  '/playlists/edit/$id': typeof AuthenticatedPlaylistsEditIdRoute
  '/playlists/view/$id': typeof AuthenticatedPlaylistsViewIdRoute
  '/songs/edit/$id': typeof AuthenticatedSongsEditIdRoute
  '/songs/view/$id': typeof AuthenticatedSongsViewIdRoute
  '/tags/edit/$id': typeof AuthenticatedTagsEditIdRoute
  '/tags/view/$id': typeof AuthenticatedTagsViewIdRoute
  '/users/edit/$id': typeof AuthenticatedUsersEditIdRoute
  '/users/view/$id': typeof AuthenticatedUsersViewIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/approved': typeof ApprovedRoute
  '/sign-in': typeof authSignInRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/notes/create': typeof AuthenticatedNotesCreateRoute
  '/playlists/create': typeof AuthenticatedPlaylistsCreateRoute
  '/songs/create': typeof AuthenticatedSongsCreateRoute
  '/tags/create': typeof AuthenticatedTagsCreateRoute
  '/users/create': typeof AuthenticatedUsersCreateRoute
  '/help-center': typeof AuthenticatedHelpCenterIndexRoute
  '/notes': typeof AuthenticatedNotesIndexRoute
  '/playlists': typeof AuthenticatedPlaylistsIndexRoute
  '/songs': typeof AuthenticatedSongsIndexRoute
  '/tags': typeof AuthenticatedTagsIndexRoute
  '/user-approval': typeof AuthenticatedUserApprovalIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
  '/notes/edit/$id': typeof AuthenticatedNotesEditIdRoute
  '/notes/view/$id': typeof AuthenticatedNotesViewIdRoute
  '/playlists/edit/$id': typeof AuthenticatedPlaylistsEditIdRoute
  '/playlists/view/$id': typeof AuthenticatedPlaylistsViewIdRoute
  '/songs/edit/$id': typeof AuthenticatedSongsEditIdRoute
  '/songs/view/$id': typeof AuthenticatedSongsViewIdRoute
  '/tags/edit/$id': typeof AuthenticatedTagsEditIdRoute
  '/tags/view/$id': typeof AuthenticatedTagsViewIdRoute
  '/users/edit/$id': typeof AuthenticatedUsersEditIdRoute
  '/users/view/$id': typeof AuthenticatedUsersViewIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/approved': typeof ApprovedRoute
  '/(auth)/sign-in': typeof authSignInRoute
  '/(errors)/401': typeof errors401Route
  '/(errors)/403': typeof errors403Route
  '/(errors)/404': typeof errors404Route
  '/(errors)/500': typeof errors500Route
  '/(errors)/503': typeof errors503Route
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/notes/create': typeof AuthenticatedNotesCreateRoute
  '/_authenticated/playlists/create': typeof AuthenticatedPlaylistsCreateRoute
  '/_authenticated/songs/create': typeof AuthenticatedSongsCreateRoute
  '/_authenticated/tags/create': typeof AuthenticatedTagsCreateRoute
  '/_authenticated/users/create': typeof AuthenticatedUsersCreateRoute
  '/_authenticated/help-center/': typeof AuthenticatedHelpCenterIndexRoute
  '/_authenticated/notes/': typeof AuthenticatedNotesIndexRoute
  '/_authenticated/playlists/': typeof AuthenticatedPlaylistsIndexRoute
  '/_authenticated/songs/': typeof AuthenticatedSongsIndexRoute
  '/_authenticated/tags/': typeof AuthenticatedTagsIndexRoute
  '/_authenticated/user-approval/': typeof AuthenticatedUserApprovalIndexRoute
  '/_authenticated/users/': typeof AuthenticatedUsersIndexRoute
  '/_authenticated/notes/edit/$id': typeof AuthenticatedNotesEditIdRoute
  '/_authenticated/notes/view/$id': typeof AuthenticatedNotesViewIdRoute
  '/_authenticated/playlists/edit/$id': typeof AuthenticatedPlaylistsEditIdRoute
  '/_authenticated/playlists/view/$id': typeof AuthenticatedPlaylistsViewIdRoute
  '/_authenticated/songs/edit/$id': typeof AuthenticatedSongsEditIdRoute
  '/_authenticated/songs/view/$id': typeof AuthenticatedSongsViewIdRoute
  '/_authenticated/tags/edit/$id': typeof AuthenticatedTagsEditIdRoute
  '/_authenticated/tags/view/$id': typeof AuthenticatedTagsViewIdRoute
  '/_authenticated/users/edit/$id': typeof AuthenticatedUsersEditIdRoute
  '/_authenticated/users/view/$id': typeof AuthenticatedUsersViewIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/approved'
    | '/sign-in'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/dashboard'
    | '/notes/create'
    | '/playlists/create'
    | '/songs/create'
    | '/tags/create'
    | '/users/create'
    | '/help-center'
    | '/notes'
    | '/playlists'
    | '/songs'
    | '/tags'
    | '/user-approval'
    | '/users'
    | '/notes/edit/$id'
    | '/notes/view/$id'
    | '/playlists/edit/$id'
    | '/playlists/view/$id'
    | '/songs/edit/$id'
    | '/songs/view/$id'
    | '/tags/edit/$id'
    | '/tags/view/$id'
    | '/users/edit/$id'
    | '/users/view/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/approved'
    | '/sign-in'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/dashboard'
    | '/notes/create'
    | '/playlists/create'
    | '/songs/create'
    | '/tags/create'
    | '/users/create'
    | '/help-center'
    | '/notes'
    | '/playlists'
    | '/songs'
    | '/tags'
    | '/user-approval'
    | '/users'
    | '/notes/edit/$id'
    | '/notes/view/$id'
    | '/playlists/edit/$id'
    | '/playlists/view/$id'
    | '/songs/edit/$id'
    | '/songs/view/$id'
    | '/tags/edit/$id'
    | '/tags/view/$id'
    | '/users/edit/$id'
    | '/users/view/$id'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/approved'
    | '/(auth)/sign-in'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/_authenticated/dashboard'
    | '/_authenticated/notes/create'
    | '/_authenticated/playlists/create'
    | '/_authenticated/songs/create'
    | '/_authenticated/tags/create'
    | '/_authenticated/users/create'
    | '/_authenticated/help-center/'
    | '/_authenticated/notes/'
    | '/_authenticated/playlists/'
    | '/_authenticated/songs/'
    | '/_authenticated/tags/'
    | '/_authenticated/user-approval/'
    | '/_authenticated/users/'
    | '/_authenticated/notes/edit/$id'
    | '/_authenticated/notes/view/$id'
    | '/_authenticated/playlists/edit/$id'
    | '/_authenticated/playlists/view/$id'
    | '/_authenticated/songs/edit/$id'
    | '/_authenticated/songs/view/$id'
    | '/_authenticated/tags/edit/$id'
    | '/_authenticated/tags/view/$id'
    | '/_authenticated/users/edit/$id'
    | '/_authenticated/users/view/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  ApprovedRoute: typeof ApprovedRoute
  authSignInRoute: typeof authSignInRoute
  errors401Route: typeof errors401Route
  errors403Route: typeof errors403Route
  errors404Route: typeof errors404Route
  errors500Route: typeof errors500Route
  errors503Route: typeof errors503Route
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/approved': {
      id: '/approved'
      path: '/approved'
      fullPath: '/approved'
      preLoaderRoute: typeof ApprovedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/users/': {
      id: '/_authenticated/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/user-approval/': {
      id: '/_authenticated/user-approval/'
      path: '/user-approval'
      fullPath: '/user-approval'
      preLoaderRoute: typeof AuthenticatedUserApprovalIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/tags/': {
      id: '/_authenticated/tags/'
      path: '/tags'
      fullPath: '/tags'
      preLoaderRoute: typeof AuthenticatedTagsIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/songs/': {
      id: '/_authenticated/songs/'
      path: '/songs'
      fullPath: '/songs'
      preLoaderRoute: typeof AuthenticatedSongsIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/playlists/': {
      id: '/_authenticated/playlists/'
      path: '/playlists'
      fullPath: '/playlists'
      preLoaderRoute: typeof AuthenticatedPlaylistsIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/notes/': {
      id: '/_authenticated/notes/'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof AuthenticatedNotesIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/help-center/': {
      id: '/_authenticated/help-center/'
      path: '/help-center'
      fullPath: '/help-center'
      preLoaderRoute: typeof AuthenticatedHelpCenterIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/users/create': {
      id: '/_authenticated/users/create'
      path: '/users/create'
      fullPath: '/users/create'
      preLoaderRoute: typeof AuthenticatedUsersCreateRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/tags/create': {
      id: '/_authenticated/tags/create'
      path: '/tags/create'
      fullPath: '/tags/create'
      preLoaderRoute: typeof AuthenticatedTagsCreateRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/songs/create': {
      id: '/_authenticated/songs/create'
      path: '/songs/create'
      fullPath: '/songs/create'
      preLoaderRoute: typeof AuthenticatedSongsCreateRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/playlists/create': {
      id: '/_authenticated/playlists/create'
      path: '/playlists/create'
      fullPath: '/playlists/create'
      preLoaderRoute: typeof AuthenticatedPlaylistsCreateRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/notes/create': {
      id: '/_authenticated/notes/create'
      path: '/notes/create'
      fullPath: '/notes/create'
      preLoaderRoute: typeof AuthenticatedNotesCreateRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/users/view/$id': {
      id: '/_authenticated/users/view/$id'
      path: '/users/view/$id'
      fullPath: '/users/view/$id'
      preLoaderRoute: typeof AuthenticatedUsersViewIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/users/edit/$id': {
      id: '/_authenticated/users/edit/$id'
      path: '/users/edit/$id'
      fullPath: '/users/edit/$id'
      preLoaderRoute: typeof AuthenticatedUsersEditIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/tags/view/$id': {
      id: '/_authenticated/tags/view/$id'
      path: '/tags/view/$id'
      fullPath: '/tags/view/$id'
      preLoaderRoute: typeof AuthenticatedTagsViewIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/tags/edit/$id': {
      id: '/_authenticated/tags/edit/$id'
      path: '/tags/edit/$id'
      fullPath: '/tags/edit/$id'
      preLoaderRoute: typeof AuthenticatedTagsEditIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/songs/view/$id': {
      id: '/_authenticated/songs/view/$id'
      path: '/songs/view/$id'
      fullPath: '/songs/view/$id'
      preLoaderRoute: typeof AuthenticatedSongsViewIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/songs/edit/$id': {
      id: '/_authenticated/songs/edit/$id'
      path: '/songs/edit/$id'
      fullPath: '/songs/edit/$id'
      preLoaderRoute: typeof AuthenticatedSongsEditIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/playlists/view/$id': {
      id: '/_authenticated/playlists/view/$id'
      path: '/playlists/view/$id'
      fullPath: '/playlists/view/$id'
      preLoaderRoute: typeof AuthenticatedPlaylistsViewIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/playlists/edit/$id': {
      id: '/_authenticated/playlists/edit/$id'
      path: '/playlists/edit/$id'
      fullPath: '/playlists/edit/$id'
      preLoaderRoute: typeof AuthenticatedPlaylistsEditIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/notes/view/$id': {
      id: '/_authenticated/notes/view/$id'
      path: '/notes/view/$id'
      fullPath: '/notes/view/$id'
      preLoaderRoute: typeof AuthenticatedNotesViewIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/notes/edit/$id': {
      id: '/_authenticated/notes/edit/$id'
      path: '/notes/edit/$id'
      fullPath: '/notes/edit/$id'
      preLoaderRoute: typeof AuthenticatedNotesEditIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
  }
}

interface AuthenticatedRouteRouteChildren {
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedNotesCreateRoute: typeof AuthenticatedNotesCreateRoute
  AuthenticatedPlaylistsCreateRoute: typeof AuthenticatedPlaylistsCreateRoute
  AuthenticatedSongsCreateRoute: typeof AuthenticatedSongsCreateRoute
  AuthenticatedTagsCreateRoute: typeof AuthenticatedTagsCreateRoute
  AuthenticatedUsersCreateRoute: typeof AuthenticatedUsersCreateRoute
  AuthenticatedHelpCenterIndexRoute: typeof AuthenticatedHelpCenterIndexRoute
  AuthenticatedNotesIndexRoute: typeof AuthenticatedNotesIndexRoute
  AuthenticatedPlaylistsIndexRoute: typeof AuthenticatedPlaylistsIndexRoute
  AuthenticatedSongsIndexRoute: typeof AuthenticatedSongsIndexRoute
  AuthenticatedTagsIndexRoute: typeof AuthenticatedTagsIndexRoute
  AuthenticatedUserApprovalIndexRoute: typeof AuthenticatedUserApprovalIndexRoute
  AuthenticatedUsersIndexRoute: typeof AuthenticatedUsersIndexRoute
  AuthenticatedNotesEditIdRoute: typeof AuthenticatedNotesEditIdRoute
  AuthenticatedNotesViewIdRoute: typeof AuthenticatedNotesViewIdRoute
  AuthenticatedPlaylistsEditIdRoute: typeof AuthenticatedPlaylistsEditIdRoute
  AuthenticatedPlaylistsViewIdRoute: typeof AuthenticatedPlaylistsViewIdRoute
  AuthenticatedSongsEditIdRoute: typeof AuthenticatedSongsEditIdRoute
  AuthenticatedSongsViewIdRoute: typeof AuthenticatedSongsViewIdRoute
  AuthenticatedTagsEditIdRoute: typeof AuthenticatedTagsEditIdRoute
  AuthenticatedTagsViewIdRoute: typeof AuthenticatedTagsViewIdRoute
  AuthenticatedUsersEditIdRoute: typeof AuthenticatedUsersEditIdRoute
  AuthenticatedUsersViewIdRoute: typeof AuthenticatedUsersViewIdRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedNotesCreateRoute: AuthenticatedNotesCreateRoute,
  AuthenticatedPlaylistsCreateRoute: AuthenticatedPlaylistsCreateRoute,
  AuthenticatedSongsCreateRoute: AuthenticatedSongsCreateRoute,
  AuthenticatedTagsCreateRoute: AuthenticatedTagsCreateRoute,
  AuthenticatedUsersCreateRoute: AuthenticatedUsersCreateRoute,
  AuthenticatedHelpCenterIndexRoute: AuthenticatedHelpCenterIndexRoute,
  AuthenticatedNotesIndexRoute: AuthenticatedNotesIndexRoute,
  AuthenticatedPlaylistsIndexRoute: AuthenticatedPlaylistsIndexRoute,
  AuthenticatedSongsIndexRoute: AuthenticatedSongsIndexRoute,
  AuthenticatedTagsIndexRoute: AuthenticatedTagsIndexRoute,
  AuthenticatedUserApprovalIndexRoute: AuthenticatedUserApprovalIndexRoute,
  AuthenticatedUsersIndexRoute: AuthenticatedUsersIndexRoute,
  AuthenticatedNotesEditIdRoute: AuthenticatedNotesEditIdRoute,
  AuthenticatedNotesViewIdRoute: AuthenticatedNotesViewIdRoute,
  AuthenticatedPlaylistsEditIdRoute: AuthenticatedPlaylistsEditIdRoute,
  AuthenticatedPlaylistsViewIdRoute: AuthenticatedPlaylistsViewIdRoute,
  AuthenticatedSongsEditIdRoute: AuthenticatedSongsEditIdRoute,
  AuthenticatedSongsViewIdRoute: AuthenticatedSongsViewIdRoute,
  AuthenticatedTagsEditIdRoute: AuthenticatedTagsEditIdRoute,
  AuthenticatedTagsViewIdRoute: AuthenticatedTagsViewIdRoute,
  AuthenticatedUsersEditIdRoute: AuthenticatedUsersEditIdRoute,
  AuthenticatedUsersViewIdRoute: AuthenticatedUsersViewIdRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  ApprovedRoute: ApprovedRoute,
  authSignInRoute: authSignInRoute,
  errors401Route: errors401Route,
  errors403Route: errors403Route,
  errors404Route: errors404Route,
  errors500Route: errors500Route,
  errors503Route: errors503Route,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
