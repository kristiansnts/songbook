/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthorizedRouteImport } from './routes/unauthorized'
import { Route as ApprovedRouteImport } from './routes/approved'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as errors503RouteImport } from './routes/(errors)/503'
import { Route as errors500RouteImport } from './routes/(errors)/500'
import { Route as errors404RouteImport } from './routes/(errors)/404'
import { Route as errors403RouteImport } from './routes/(errors)/403'
import { Route as errors401RouteImport } from './routes/(errors)/401'
import { Route as authSignInRouteImport } from './routes/(auth)/sign-in'
import { Route as AuthenticatedAdminRouteRouteImport } from './routes/_authenticated/admin/route'
import { Route as AuthenticatedHelpCenterIndexRouteImport } from './routes/_authenticated/help-center/index'
import { Route as AuthenticatedAdminIndexRouteImport } from './routes/_authenticated/admin/index'
import { Route as AuthenticatedUserSongRouteImport } from './routes/_authenticated/user/song'
import { Route as AuthenticatedUserDashboardRouteImport } from './routes/_authenticated/user/dashboard'
import { Route as AuthenticatedUserArtistRouteImport } from './routes/_authenticated/user/artist'
import { Route as AuthenticatedPlaylistIdRouteImport } from './routes/_authenticated/playlist/$id'
import { Route as AuthenticatedAdminDashboardRouteImport } from './routes/_authenticated/admin/dashboard'
import { Route as AuthenticatedUserSongIndexRouteImport } from './routes/_authenticated/user/song/index'
import { Route as AuthenticatedAdminUsersIndexRouteImport } from './routes/_authenticated/admin/users/index'
import { Route as AuthenticatedAdminSongsIndexRouteImport } from './routes/_authenticated/admin/songs/index'
import { Route as AuthenticatedUserSongIdRouteImport } from './routes/_authenticated/user/song/$id'
import { Route as AuthenticatedUserPlaylistIdRouteImport } from './routes/_authenticated/user/playlist/$id'
import { Route as AuthenticatedUserArtistNameRouteImport } from './routes/_authenticated/user/artist/$name'
import { Route as AuthenticatedPlaylistJoinSharetokenRouteImport } from './routes/_authenticated/playlist/join/$sharetoken'
import { Route as AuthenticatedAdminSongsCreateRouteImport } from './routes/_authenticated/admin/songs/create'
import { Route as AuthenticatedUserPlaylistViewIdRouteImport } from './routes/_authenticated/user/playlist/view/$id'
import { Route as AuthenticatedAdminUsersViewIdRouteImport } from './routes/_authenticated/admin/users/view/$id'
import { Route as AuthenticatedAdminSongsViewIdRouteImport } from './routes/_authenticated/admin/songs/view/$id'
import { Route as AuthenticatedAdminSongsEditIdRouteImport } from './routes/_authenticated/admin/songs/edit/$id'

const UnauthorizedRoute = UnauthorizedRouteImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRouteImport,
} as any)
const ApprovedRoute = ApprovedRouteImport.update({
  id: '/approved',
  path: '/approved',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const errors503Route = errors503RouteImport.update({
  id: '/(errors)/503',
  path: '/503',
  getParentRoute: () => rootRouteImport,
} as any)
const errors500Route = errors500RouteImport.update({
  id: '/(errors)/500',
  path: '/500',
  getParentRoute: () => rootRouteImport,
} as any)
const errors404Route = errors404RouteImport.update({
  id: '/(errors)/404',
  path: '/404',
  getParentRoute: () => rootRouteImport,
} as any)
const errors403Route = errors403RouteImport.update({
  id: '/(errors)/403',
  path: '/403',
  getParentRoute: () => rootRouteImport,
} as any)
const errors401Route = errors401RouteImport.update({
  id: '/(errors)/401',
  path: '/401',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignInRoute = authSignInRouteImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedAdminRouteRoute = AuthenticatedAdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedHelpCenterIndexRoute =
  AuthenticatedHelpCenterIndexRouteImport.update({
    id: '/help-center/',
    path: '/help-center/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedAdminIndexRoute = AuthenticatedAdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedAdminRouteRoute,
} as any)
const AuthenticatedUserSongRoute = AuthenticatedUserSongRouteImport.update({
  id: '/user/song',
  path: '/user/song',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedUserDashboardRoute =
  AuthenticatedUserDashboardRouteImport.update({
    id: '/user/dashboard',
    path: '/user/dashboard',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedUserArtistRoute = AuthenticatedUserArtistRouteImport.update({
  id: '/user/artist',
  path: '/user/artist',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedPlaylistIdRoute = AuthenticatedPlaylistIdRouteImport.update({
  id: '/playlist/$id',
  path: '/playlist/$id',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedAdminDashboardRoute =
  AuthenticatedAdminDashboardRouteImport.update({
    id: '/dashboard',
    path: '/dashboard',
    getParentRoute: () => AuthenticatedAdminRouteRoute,
  } as any)
const AuthenticatedUserSongIndexRoute =
  AuthenticatedUserSongIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedUserSongRoute,
  } as any)
const AuthenticatedAdminUsersIndexRoute =
  AuthenticatedAdminUsersIndexRouteImport.update({
    id: '/users/',
    path: '/users/',
    getParentRoute: () => AuthenticatedAdminRouteRoute,
  } as any)
const AuthenticatedAdminSongsIndexRoute =
  AuthenticatedAdminSongsIndexRouteImport.update({
    id: '/songs/',
    path: '/songs/',
    getParentRoute: () => AuthenticatedAdminRouteRoute,
  } as any)
const AuthenticatedUserSongIdRoute = AuthenticatedUserSongIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AuthenticatedUserSongRoute,
} as any)
const AuthenticatedUserPlaylistIdRoute =
  AuthenticatedUserPlaylistIdRouteImport.update({
    id: '/user/playlist/$id',
    path: '/user/playlist/$id',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedUserArtistNameRoute =
  AuthenticatedUserArtistNameRouteImport.update({
    id: '/$name',
    path: '/$name',
    getParentRoute: () => AuthenticatedUserArtistRoute,
  } as any)
const AuthenticatedPlaylistJoinSharetokenRoute =
  AuthenticatedPlaylistJoinSharetokenRouteImport.update({
    id: '/playlist/join/$sharetoken',
    path: '/playlist/join/$sharetoken',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedAdminSongsCreateRoute =
  AuthenticatedAdminSongsCreateRouteImport.update({
    id: '/songs/create',
    path: '/songs/create',
    getParentRoute: () => AuthenticatedAdminRouteRoute,
  } as any)
const AuthenticatedUserPlaylistViewIdRoute =
  AuthenticatedUserPlaylistViewIdRouteImport.update({
    id: '/user/playlist/view/$id',
    path: '/user/playlist/view/$id',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedAdminUsersViewIdRoute =
  AuthenticatedAdminUsersViewIdRouteImport.update({
    id: '/users/view/$id',
    path: '/users/view/$id',
    getParentRoute: () => AuthenticatedAdminRouteRoute,
  } as any)
const AuthenticatedAdminSongsViewIdRoute =
  AuthenticatedAdminSongsViewIdRouteImport.update({
    id: '/songs/view/$id',
    path: '/songs/view/$id',
    getParentRoute: () => AuthenticatedAdminRouteRoute,
  } as any)
const AuthenticatedAdminSongsEditIdRoute =
  AuthenticatedAdminSongsEditIdRouteImport.update({
    id: '/songs/edit/$id',
    path: '/songs/edit/$id',
    getParentRoute: () => AuthenticatedAdminRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/approved': typeof ApprovedRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/admin': typeof AuthenticatedAdminRouteRouteWithChildren
  '/sign-in': typeof authSignInRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/admin/dashboard': typeof AuthenticatedAdminDashboardRoute
  '/playlist/$id': typeof AuthenticatedPlaylistIdRoute
  '/user/artist': typeof AuthenticatedUserArtistRouteWithChildren
  '/user/dashboard': typeof AuthenticatedUserDashboardRoute
  '/user/song': typeof AuthenticatedUserSongRouteWithChildren
  '/admin/': typeof AuthenticatedAdminIndexRoute
  '/help-center': typeof AuthenticatedHelpCenterIndexRoute
  '/admin/songs/create': typeof AuthenticatedAdminSongsCreateRoute
  '/playlist/join/$sharetoken': typeof AuthenticatedPlaylistJoinSharetokenRoute
  '/user/artist/$name': typeof AuthenticatedUserArtistNameRoute
  '/user/playlist/$id': typeof AuthenticatedUserPlaylistIdRoute
  '/user/song/$id': typeof AuthenticatedUserSongIdRoute
  '/admin/songs': typeof AuthenticatedAdminSongsIndexRoute
  '/admin/users': typeof AuthenticatedAdminUsersIndexRoute
  '/user/song/': typeof AuthenticatedUserSongIndexRoute
  '/admin/songs/edit/$id': typeof AuthenticatedAdminSongsEditIdRoute
  '/admin/songs/view/$id': typeof AuthenticatedAdminSongsViewIdRoute
  '/admin/users/view/$id': typeof AuthenticatedAdminUsersViewIdRoute
  '/user/playlist/view/$id': typeof AuthenticatedUserPlaylistViewIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/approved': typeof ApprovedRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/sign-in': typeof authSignInRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/admin/dashboard': typeof AuthenticatedAdminDashboardRoute
  '/playlist/$id': typeof AuthenticatedPlaylistIdRoute
  '/user/artist': typeof AuthenticatedUserArtistRouteWithChildren
  '/user/dashboard': typeof AuthenticatedUserDashboardRoute
  '/admin': typeof AuthenticatedAdminIndexRoute
  '/help-center': typeof AuthenticatedHelpCenterIndexRoute
  '/admin/songs/create': typeof AuthenticatedAdminSongsCreateRoute
  '/playlist/join/$sharetoken': typeof AuthenticatedPlaylistJoinSharetokenRoute
  '/user/artist/$name': typeof AuthenticatedUserArtistNameRoute
  '/user/playlist/$id': typeof AuthenticatedUserPlaylistIdRoute
  '/user/song/$id': typeof AuthenticatedUserSongIdRoute
  '/admin/songs': typeof AuthenticatedAdminSongsIndexRoute
  '/admin/users': typeof AuthenticatedAdminUsersIndexRoute
  '/user/song': typeof AuthenticatedUserSongIndexRoute
  '/admin/songs/edit/$id': typeof AuthenticatedAdminSongsEditIdRoute
  '/admin/songs/view/$id': typeof AuthenticatedAdminSongsViewIdRoute
  '/admin/users/view/$id': typeof AuthenticatedAdminUsersViewIdRoute
  '/user/playlist/view/$id': typeof AuthenticatedUserPlaylistViewIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/approved': typeof ApprovedRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/_authenticated/admin': typeof AuthenticatedAdminRouteRouteWithChildren
  '/(auth)/sign-in': typeof authSignInRoute
  '/(errors)/401': typeof errors401Route
  '/(errors)/403': typeof errors403Route
  '/(errors)/404': typeof errors404Route
  '/(errors)/500': typeof errors500Route
  '/(errors)/503': typeof errors503Route
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/admin/dashboard': typeof AuthenticatedAdminDashboardRoute
  '/_authenticated/playlist/$id': typeof AuthenticatedPlaylistIdRoute
  '/_authenticated/user/artist': typeof AuthenticatedUserArtistRouteWithChildren
  '/_authenticated/user/dashboard': typeof AuthenticatedUserDashboardRoute
  '/_authenticated/user/song': typeof AuthenticatedUserSongRouteWithChildren
  '/_authenticated/admin/': typeof AuthenticatedAdminIndexRoute
  '/_authenticated/help-center/': typeof AuthenticatedHelpCenterIndexRoute
  '/_authenticated/admin/songs/create': typeof AuthenticatedAdminSongsCreateRoute
  '/_authenticated/playlist/join/$sharetoken': typeof AuthenticatedPlaylistJoinSharetokenRoute
  '/_authenticated/user/artist/$name': typeof AuthenticatedUserArtistNameRoute
  '/_authenticated/user/playlist/$id': typeof AuthenticatedUserPlaylistIdRoute
  '/_authenticated/user/song/$id': typeof AuthenticatedUserSongIdRoute
  '/_authenticated/admin/songs/': typeof AuthenticatedAdminSongsIndexRoute
  '/_authenticated/admin/users/': typeof AuthenticatedAdminUsersIndexRoute
  '/_authenticated/user/song/': typeof AuthenticatedUserSongIndexRoute
  '/_authenticated/admin/songs/edit/$id': typeof AuthenticatedAdminSongsEditIdRoute
  '/_authenticated/admin/songs/view/$id': typeof AuthenticatedAdminSongsViewIdRoute
  '/_authenticated/admin/users/view/$id': typeof AuthenticatedAdminUsersViewIdRoute
  '/_authenticated/user/playlist/view/$id': typeof AuthenticatedUserPlaylistViewIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/approved'
    | '/unauthorized'
    | '/admin'
    | '/sign-in'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/dashboard'
    | '/admin/dashboard'
    | '/playlist/$id'
    | '/user/artist'
    | '/user/dashboard'
    | '/user/song'
    | '/admin/'
    | '/help-center'
    | '/admin/songs/create'
    | '/playlist/join/$sharetoken'
    | '/user/artist/$name'
    | '/user/playlist/$id'
    | '/user/song/$id'
    | '/admin/songs'
    | '/admin/users'
    | '/user/song/'
    | '/admin/songs/edit/$id'
    | '/admin/songs/view/$id'
    | '/admin/users/view/$id'
    | '/user/playlist/view/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/approved'
    | '/unauthorized'
    | '/sign-in'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/dashboard'
    | '/admin/dashboard'
    | '/playlist/$id'
    | '/user/artist'
    | '/user/dashboard'
    | '/admin'
    | '/help-center'
    | '/admin/songs/create'
    | '/playlist/join/$sharetoken'
    | '/user/artist/$name'
    | '/user/playlist/$id'
    | '/user/song/$id'
    | '/admin/songs'
    | '/admin/users'
    | '/user/song'
    | '/admin/songs/edit/$id'
    | '/admin/songs/view/$id'
    | '/admin/users/view/$id'
    | '/user/playlist/view/$id'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/approved'
    | '/unauthorized'
    | '/_authenticated/admin'
    | '/(auth)/sign-in'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/_authenticated/dashboard'
    | '/_authenticated/admin/dashboard'
    | '/_authenticated/playlist/$id'
    | '/_authenticated/user/artist'
    | '/_authenticated/user/dashboard'
    | '/_authenticated/user/song'
    | '/_authenticated/admin/'
    | '/_authenticated/help-center/'
    | '/_authenticated/admin/songs/create'
    | '/_authenticated/playlist/join/$sharetoken'
    | '/_authenticated/user/artist/$name'
    | '/_authenticated/user/playlist/$id'
    | '/_authenticated/user/song/$id'
    | '/_authenticated/admin/songs/'
    | '/_authenticated/admin/users/'
    | '/_authenticated/user/song/'
    | '/_authenticated/admin/songs/edit/$id'
    | '/_authenticated/admin/songs/view/$id'
    | '/_authenticated/admin/users/view/$id'
    | '/_authenticated/user/playlist/view/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  ApprovedRoute: typeof ApprovedRoute
  UnauthorizedRoute: typeof UnauthorizedRoute
  authSignInRoute: typeof authSignInRoute
  errors401Route: typeof errors401Route
  errors403Route: typeof errors403Route
  errors404Route: typeof errors404Route
  errors500Route: typeof errors500Route
  errors503Route: typeof errors503Route
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/approved': {
      id: '/approved'
      path: '/approved'
      fullPath: '/approved'
      preLoaderRoute: typeof ApprovedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/admin': {
      id: '/_authenticated/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AuthenticatedAdminRouteRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/help-center/': {
      id: '/_authenticated/help-center/'
      path: '/help-center'
      fullPath: '/help-center'
      preLoaderRoute: typeof AuthenticatedHelpCenterIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/admin/': {
      id: '/_authenticated/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AuthenticatedAdminIndexRouteImport
      parentRoute: typeof AuthenticatedAdminRouteRoute
    }
    '/_authenticated/user/song': {
      id: '/_authenticated/user/song'
      path: '/user/song'
      fullPath: '/user/song'
      preLoaderRoute: typeof AuthenticatedUserSongRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/user/dashboard': {
      id: '/_authenticated/user/dashboard'
      path: '/user/dashboard'
      fullPath: '/user/dashboard'
      preLoaderRoute: typeof AuthenticatedUserDashboardRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/user/artist': {
      id: '/_authenticated/user/artist'
      path: '/user/artist'
      fullPath: '/user/artist'
      preLoaderRoute: typeof AuthenticatedUserArtistRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/playlist/$id': {
      id: '/_authenticated/playlist/$id'
      path: '/playlist/$id'
      fullPath: '/playlist/$id'
      preLoaderRoute: typeof AuthenticatedPlaylistIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/admin/dashboard': {
      id: '/_authenticated/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AuthenticatedAdminDashboardRouteImport
      parentRoute: typeof AuthenticatedAdminRouteRoute
    }
    '/_authenticated/user/song/': {
      id: '/_authenticated/user/song/'
      path: '/'
      fullPath: '/user/song/'
      preLoaderRoute: typeof AuthenticatedUserSongIndexRouteImport
      parentRoute: typeof AuthenticatedUserSongRoute
    }
    '/_authenticated/admin/users/': {
      id: '/_authenticated/admin/users/'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AuthenticatedAdminUsersIndexRouteImport
      parentRoute: typeof AuthenticatedAdminRouteRoute
    }
    '/_authenticated/admin/songs/': {
      id: '/_authenticated/admin/songs/'
      path: '/songs'
      fullPath: '/admin/songs'
      preLoaderRoute: typeof AuthenticatedAdminSongsIndexRouteImport
      parentRoute: typeof AuthenticatedAdminRouteRoute
    }
    '/_authenticated/user/song/$id': {
      id: '/_authenticated/user/song/$id'
      path: '/$id'
      fullPath: '/user/song/$id'
      preLoaderRoute: typeof AuthenticatedUserSongIdRouteImport
      parentRoute: typeof AuthenticatedUserSongRoute
    }
    '/_authenticated/user/playlist/$id': {
      id: '/_authenticated/user/playlist/$id'
      path: '/user/playlist/$id'
      fullPath: '/user/playlist/$id'
      preLoaderRoute: typeof AuthenticatedUserPlaylistIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/user/artist/$name': {
      id: '/_authenticated/user/artist/$name'
      path: '/$name'
      fullPath: '/user/artist/$name'
      preLoaderRoute: typeof AuthenticatedUserArtistNameRouteImport
      parentRoute: typeof AuthenticatedUserArtistRoute
    }
    '/_authenticated/playlist/join/$sharetoken': {
      id: '/_authenticated/playlist/join/$sharetoken'
      path: '/playlist/join/$sharetoken'
      fullPath: '/playlist/join/$sharetoken'
      preLoaderRoute: typeof AuthenticatedPlaylistJoinSharetokenRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/admin/songs/create': {
      id: '/_authenticated/admin/songs/create'
      path: '/songs/create'
      fullPath: '/admin/songs/create'
      preLoaderRoute: typeof AuthenticatedAdminSongsCreateRouteImport
      parentRoute: typeof AuthenticatedAdminRouteRoute
    }
    '/_authenticated/user/playlist/view/$id': {
      id: '/_authenticated/user/playlist/view/$id'
      path: '/user/playlist/view/$id'
      fullPath: '/user/playlist/view/$id'
      preLoaderRoute: typeof AuthenticatedUserPlaylistViewIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/admin/users/view/$id': {
      id: '/_authenticated/admin/users/view/$id'
      path: '/users/view/$id'
      fullPath: '/admin/users/view/$id'
      preLoaderRoute: typeof AuthenticatedAdminUsersViewIdRouteImport
      parentRoute: typeof AuthenticatedAdminRouteRoute
    }
    '/_authenticated/admin/songs/view/$id': {
      id: '/_authenticated/admin/songs/view/$id'
      path: '/songs/view/$id'
      fullPath: '/admin/songs/view/$id'
      preLoaderRoute: typeof AuthenticatedAdminSongsViewIdRouteImport
      parentRoute: typeof AuthenticatedAdminRouteRoute
    }
    '/_authenticated/admin/songs/edit/$id': {
      id: '/_authenticated/admin/songs/edit/$id'
      path: '/songs/edit/$id'
      fullPath: '/admin/songs/edit/$id'
      preLoaderRoute: typeof AuthenticatedAdminSongsEditIdRouteImport
      parentRoute: typeof AuthenticatedAdminRouteRoute
    }
  }
}

interface AuthenticatedAdminRouteRouteChildren {
  AuthenticatedAdminDashboardRoute: typeof AuthenticatedAdminDashboardRoute
  AuthenticatedAdminIndexRoute: typeof AuthenticatedAdminIndexRoute
  AuthenticatedAdminSongsCreateRoute: typeof AuthenticatedAdminSongsCreateRoute
  AuthenticatedAdminSongsIndexRoute: typeof AuthenticatedAdminSongsIndexRoute
  AuthenticatedAdminUsersIndexRoute: typeof AuthenticatedAdminUsersIndexRoute
  AuthenticatedAdminSongsEditIdRoute: typeof AuthenticatedAdminSongsEditIdRoute
  AuthenticatedAdminSongsViewIdRoute: typeof AuthenticatedAdminSongsViewIdRoute
  AuthenticatedAdminUsersViewIdRoute: typeof AuthenticatedAdminUsersViewIdRoute
}

const AuthenticatedAdminRouteRouteChildren: AuthenticatedAdminRouteRouteChildren =
  {
    AuthenticatedAdminDashboardRoute: AuthenticatedAdminDashboardRoute,
    AuthenticatedAdminIndexRoute: AuthenticatedAdminIndexRoute,
    AuthenticatedAdminSongsCreateRoute: AuthenticatedAdminSongsCreateRoute,
    AuthenticatedAdminSongsIndexRoute: AuthenticatedAdminSongsIndexRoute,
    AuthenticatedAdminUsersIndexRoute: AuthenticatedAdminUsersIndexRoute,
    AuthenticatedAdminSongsEditIdRoute: AuthenticatedAdminSongsEditIdRoute,
    AuthenticatedAdminSongsViewIdRoute: AuthenticatedAdminSongsViewIdRoute,
    AuthenticatedAdminUsersViewIdRoute: AuthenticatedAdminUsersViewIdRoute,
  }

const AuthenticatedAdminRouteRouteWithChildren =
  AuthenticatedAdminRouteRoute._addFileChildren(
    AuthenticatedAdminRouteRouteChildren,
  )

interface AuthenticatedUserArtistRouteChildren {
  AuthenticatedUserArtistNameRoute: typeof AuthenticatedUserArtistNameRoute
}

const AuthenticatedUserArtistRouteChildren: AuthenticatedUserArtistRouteChildren =
  {
    AuthenticatedUserArtistNameRoute: AuthenticatedUserArtistNameRoute,
  }

const AuthenticatedUserArtistRouteWithChildren =
  AuthenticatedUserArtistRoute._addFileChildren(
    AuthenticatedUserArtistRouteChildren,
  )

interface AuthenticatedUserSongRouteChildren {
  AuthenticatedUserSongIdRoute: typeof AuthenticatedUserSongIdRoute
  AuthenticatedUserSongIndexRoute: typeof AuthenticatedUserSongIndexRoute
}

const AuthenticatedUserSongRouteChildren: AuthenticatedUserSongRouteChildren = {
  AuthenticatedUserSongIdRoute: AuthenticatedUserSongIdRoute,
  AuthenticatedUserSongIndexRoute: AuthenticatedUserSongIndexRoute,
}

const AuthenticatedUserSongRouteWithChildren =
  AuthenticatedUserSongRoute._addFileChildren(
    AuthenticatedUserSongRouteChildren,
  )

interface AuthenticatedRouteRouteChildren {
  AuthenticatedAdminRouteRoute: typeof AuthenticatedAdminRouteRouteWithChildren
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedPlaylistIdRoute: typeof AuthenticatedPlaylistIdRoute
  AuthenticatedUserArtistRoute: typeof AuthenticatedUserArtistRouteWithChildren
  AuthenticatedUserDashboardRoute: typeof AuthenticatedUserDashboardRoute
  AuthenticatedUserSongRoute: typeof AuthenticatedUserSongRouteWithChildren
  AuthenticatedHelpCenterIndexRoute: typeof AuthenticatedHelpCenterIndexRoute
  AuthenticatedPlaylistJoinSharetokenRoute: typeof AuthenticatedPlaylistJoinSharetokenRoute
  AuthenticatedUserPlaylistIdRoute: typeof AuthenticatedUserPlaylistIdRoute
  AuthenticatedUserPlaylistViewIdRoute: typeof AuthenticatedUserPlaylistViewIdRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedAdminRouteRoute: AuthenticatedAdminRouteRouteWithChildren,
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedPlaylistIdRoute: AuthenticatedPlaylistIdRoute,
  AuthenticatedUserArtistRoute: AuthenticatedUserArtistRouteWithChildren,
  AuthenticatedUserDashboardRoute: AuthenticatedUserDashboardRoute,
  AuthenticatedUserSongRoute: AuthenticatedUserSongRouteWithChildren,
  AuthenticatedHelpCenterIndexRoute: AuthenticatedHelpCenterIndexRoute,
  AuthenticatedPlaylistJoinSharetokenRoute:
    AuthenticatedPlaylistJoinSharetokenRoute,
  AuthenticatedUserPlaylistIdRoute: AuthenticatedUserPlaylistIdRoute,
  AuthenticatedUserPlaylistViewIdRoute: AuthenticatedUserPlaylistViewIdRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  ApprovedRoute: ApprovedRoute,
  UnauthorizedRoute: UnauthorizedRoute,
  authSignInRoute: authSignInRoute,
  errors401Route: errors401Route,
  errors403Route: errors403Route,
  errors404Route: errors404Route,
  errors500Route: errors500Route,
  errors503Route: errors503Route,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
